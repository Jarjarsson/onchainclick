{"ast":null,"code":"import Web3 from 'web3';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW');\nconst clicker = new web3.eth.Contract(abi, contractAddress);\nconst click = async (contractAddress, address) => {\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: clicker.methods.click().encodeABI()\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      status: 'Success! Transaction hash: ' + txHash\n    };\n  } catch (error) {\n    return {\n      status: 'ðŸ˜¥ You suck'\n    };\n  }\n};\nconst getClicks = async () => {\n  const data = await clicker.methods.clickedCount().call();\n  return Number(data);\n};\nconst reset = async (contractAddress, address) => {\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: clicker.methods.reset().encodeABI()\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      status: 'Success! Transaction hash: ' + txHash\n    };\n  } catch (error) {\n    return {\n      status: 'ðŸ˜¥ Oh no something went wrong'\n    };\n  }\n};\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!'\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob'\n    };\n  }\n};\nexport { click, getClicks, connectWallet, reset };","map":{"version":3,"names":["Web3","abi","contractAddress","web3","clicker","eth","Contract","click","address","transactionParameters","to","from","data","methods","encodeABI","txHash","window","ethereum","request","method","params","status","error","getClicks","clickedCount","call","Number","reset","connectWallet","addressArray","obj","err"],"sources":["/Users/allanheremi/Desktop/dev/onchainbet/src/blockchain/web3/web3client.ts"],"sourcesContent":["import Web3, { Web3Eth } from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\nimport { Window } from '../../type';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\n\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3(\n  'wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW'\n);\n\nconst clicker = new web3.eth.Contract(abi, contractAddress);\n\nconst click = async (contractAddress: string, address: string) => {\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: clicker.methods.click().encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await (window as any).ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    });\n    return {\n      status: 'Success! Transaction hash: ' + txHash,\n    };\n  } catch (error) {\n    return {\n      status: 'ðŸ˜¥ You suck',\n    };\n  }\n};\n\nconst getClicks = async () => {\n  const data = (await clicker.methods.clickedCount().call()) as bigint;\n  return Number(data);\n};\n\nconst reset = async (contractAddress: string, address : string) => {\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: clicker.methods.reset().encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await (window as any).ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    });\n    return {\n      status: 'Success! Transaction hash: ' + txHash,\n    };\n  } catch (error) {\n    return {\n      status: 'ðŸ˜¥ Oh no something went wrong',\n    };\n  }\n};\n\nconst connectWallet = async () => {\n  if ((window as any).ethereum) {\n    try {\n      const addressArray = await (window as any).ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!',\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob',\n    };\n  }\n};\n\nexport { click, getClicks, connectWallet, reset };\n"],"mappings":"AAAA,OAAOA,IAAI,MAAmB,MAAM;AAEpC,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,eAAe,MAAM,sBAAsB;AAKlD;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CACnB,oEACF,CAAC;AAED,MAAMI,OAAO,GAAG,IAAID,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,GAAG,EAAEC,eAAe,CAAC;AAE3D,MAAMK,KAAK,GAAG,MAAAA,CAAOL,eAAuB,EAAEM,OAAe,KAAK;EAChE;EACA,MAAMC,qBAAqB,GAAG;IAC5BC,EAAE,EAAER,eAAe;IAAE;IACrBS,IAAI,EAAEH,OAAO;IAAE;IACfI,IAAI,EAAER,OAAO,CAACS,OAAO,CAACN,KAAK,CAAC,CAAC,CAACO,SAAS,CAAC;EAC1C,CAAC;;EAED;EACA,IAAI;IACF,MAAMC,MAAM,GAAG,MAAOC,MAAM,CAASC,QAAQ,CAACC,OAAO,CAAC;MACpDC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAACX,qBAAqB;IAChC,CAAC,CAAC;IACF,OAAO;MACLY,MAAM,EAAE,6BAA6B,GAAGN;IAC1C,CAAC;EACH,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,OAAO;MACLD,MAAM,EAAE;IACV,CAAC;EACH;AACF,CAAC;AAED,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMX,IAAI,GAAI,MAAMR,OAAO,CAACS,OAAO,CAACW,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,CAAY;EACpE,OAAOC,MAAM,CAACd,IAAI,CAAC;AACrB,CAAC;AAED,MAAMe,KAAK,GAAG,MAAAA,CAAOzB,eAAuB,EAAEM,OAAgB,KAAK;EAEjE;EACA,MAAMC,qBAAqB,GAAG;IAC5BC,EAAE,EAAER,eAAe;IAAE;IACrBS,IAAI,EAAEH,OAAO;IAAE;IACfI,IAAI,EAAER,OAAO,CAACS,OAAO,CAACc,KAAK,CAAC,CAAC,CAACb,SAAS,CAAC;EAC1C,CAAC;;EAED;EACA,IAAI;IACF,MAAMC,MAAM,GAAG,MAAOC,MAAM,CAASC,QAAQ,CAACC,OAAO,CAAC;MACpDC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAACX,qBAAqB;IAChC,CAAC,CAAC;IACF,OAAO;MACLY,MAAM,EAAE,6BAA6B,GAAGN;IAC1C,CAAC;EACH,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,OAAO;MACLD,MAAM,EAAE;IACV,CAAC;EACH;AACF,CAAC;AAED,MAAMO,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAKZ,MAAM,CAASC,QAAQ,EAAE;IAC5B,IAAI;MACF,MAAMY,YAAY,GAAG,MAAOb,MAAM,CAASC,QAAQ,CAACC,OAAO,CAAC;QAC1DC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMW,GAAG,GAAG;QACVT,MAAM,EAAE,yBAAyB;QACjCb,OAAO,EAAEqB,YAAY,CAAC,CAAC;MACzB,CAAC;MACD,OAAOC,GAAG;IACZ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO;QACLvB,OAAO,EAAE,EAAE;QACXa,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC,MAAM;IACL,OAAO;MACLb,OAAO,EAAE,EAAE;MACXa,MAAM,EAAE;IACV,CAAC;EACH;AACF,CAAC;AAED,SAASd,KAAK,EAAEgB,SAAS,EAAEK,aAAa,EAAED,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}