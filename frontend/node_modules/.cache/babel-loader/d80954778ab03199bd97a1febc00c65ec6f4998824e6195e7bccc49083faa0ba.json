{"ast":null,"code":"import Web3 from 'web3';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW');\nconst clicker = new web3.eth.Contract(abi, contractAddress);\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n};\nconst getClicks = async () => {\n  const data = await clicker.methods.clickedCount().call();\n  return Number(data);\n};\nconst reset = () => {\n  clicker.methods.reset().call().then(console.log);\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      return addressArray;\n    } catch (err) {\n      return [];\n    }\n  } else {\n    return [];\n  }\n};\nexport { click, getClicks };","map":{"version":3,"names":["Web3","abi","contractAddress","web3","clicker","eth","Contract","click","methods","call","then","console","log","getClicks","data","clickedCount","Number","reset","connectWallet","window","ethereum","addressArray","request","method","err"],"sources":["/Users/allanheremi/Desktop/dev/onchainbet/src/blockchain/web3/web3client.ts"],"sourcesContent":["import Web3, { Web3Eth } from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\nimport { Window } from '../../type';\n\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW');\n\nconst clicker = new web3.eth.Contract(abi, contractAddress);\n\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n};\n\nconst getClicks = async () => {\n  const data = await clicker.methods.clickedCount().call() as bigint;\n  return Number(data);\n};\n\nconst reset = () => {\n    clicker.methods.reset().call().then(console.log)\n}\n\nexport const connectWallet = async () => {\n    if ((window as any).ethereum)  {\n      try {\n        const addressArray = await (window as any).ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        return addressArray;\n      } catch (err) {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  };\n  \n\nexport { click, getClicks };\n"],"mappings":"AAAA,OAAOA,IAAI,MAAmB,MAAM;AAEpC,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,eAAe,MAAM,sBAAsB;AAGlD;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAAC,oEAAoE,CAAC;AAE3F,MAAMI,OAAO,GAAG,IAAID,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,GAAG,EAAEC,eAAe,CAAC;AAE3D,MAAMK,KAAK,GAAGA,CAAA,KAAM;EAClBH,OAAO,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;AAClD,CAAC;AAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMC,IAAI,GAAG,MAAMV,OAAO,CAACI,OAAO,CAACO,YAAY,CAAC,CAAC,CAACN,IAAI,CAAC,CAAW;EAClE,OAAOO,MAAM,CAACF,IAAI,CAAC;AACrB,CAAC;AAED,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAChBb,OAAO,CAACI,OAAO,CAACS,KAAK,CAAC,CAAC,CAACR,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;AACpD,CAAC;AAED,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAKC,MAAM,CAASC,QAAQ,EAAG;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAG,MAAOF,MAAM,CAASC,QAAQ,CAACE,OAAO,CAAC;QAC1DC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,OAAOF,YAAY;IACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAO,EAAE;IACX;EACF,CAAC,MAAM;IACL,OAAO,EAAE;EACX;AACF,CAAC;AAGH,SAASjB,KAAK,EAAEM,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}