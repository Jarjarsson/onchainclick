{"ast":null,"code":"import Web3 from 'web3';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW');\nconst clicker = new web3.eth.Contract(abi, contractAddress);\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n\n  /* \n  //set up transaction parameters\n   const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.update(message).encodeABI(),\n    };\n  \n  //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status: (\n  \n            ✅{\" \"}\n  \n              View the status of your transaction on Etherscan!\n  \n  \n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n  \n        ),\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n  */\n};\n\nconst getClicks = async () => {\n  const data = await clicker.methods.clickedCount().call();\n  return Number(data);\n};\nconst reset = () => {\n  clicker.methods.reset().call().then(console.log);\n};\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!'\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob'\n    };\n  }\n};\nexport { click, getClicks, connectWallet };","map":{"version":3,"names":["Web3","abi","contractAddress","web3","clicker","eth","Contract","click","methods","call","then","console","log","getClicks","data","clickedCount","Number","reset","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err"],"sources":["/Users/allanheremi/Desktop/dev/onchainbet/src/blockchain/web3/web3client.ts"],"sourcesContent":["import Web3, { Web3Eth } from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\nimport { Window } from '../../type';\n\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3(\n  'wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW'\n);\n\nconst clicker = new web3.eth.Contract(abi, contractAddress);\n\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n\n/* \n//set up transaction parameters\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n\n//sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n\n          ✅{\" \"}\n\n            View the status of your transaction on Etherscan!\n\n\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n*/\n\n};\n\nconst getClicks = async () => {\n  const data = (await clicker.methods.clickedCount().call()) as bigint;\n  return Number(data);\n};\n\nconst reset = () => {\n  clicker.methods.reset().call().then(console.log);\n};\n\nconst connectWallet = async () => {\n  if ((window as any).ethereum) {\n    try {\n      const addressArray = await (window as any).ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!',\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob',\n    };\n  }\n};\n\nexport { click, getClicks, connectWallet };\n"],"mappings":"AAAA,OAAOA,IAAI,MAAmB,MAAM;AAEpC,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,eAAe,MAAM,sBAAsB;AAGlD;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CACnB,oEACF,CAAC;AAED,MAAMI,OAAO,GAAG,IAAID,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,GAAG,EAAEC,eAAe,CAAC;AAE3D,MAAMK,KAAK,GAAGA,CAAA,KAAM;EAClBH,OAAO,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;;EAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;;AAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMC,IAAI,GAAI,MAAMV,OAAO,CAACI,OAAO,CAACO,YAAY,CAAC,CAAC,CAACN,IAAI,CAAC,CAAY;EACpE,OAAOO,MAAM,CAACF,IAAI,CAAC;AACrB,CAAC;AAED,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAClBb,OAAO,CAACI,OAAO,CAACS,KAAK,CAAC,CAAC,CAACR,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;AAClD,CAAC;AAED,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAKC,MAAM,CAASC,QAAQ,EAAE;IAC5B,IAAI;MACF,MAAMC,YAAY,GAAG,MAAOF,MAAM,CAASC,QAAQ,CAACE,OAAO,CAAC;QAC1DC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMC,GAAG,GAAG;QACVC,MAAM,EAAE,yBAAyB;QACjCC,OAAO,EAAEL,YAAY,CAAC,CAAC;MACzB,CAAC;MACD,OAAOG,GAAG;IACZ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAO;QACLD,OAAO,EAAE,EAAE;QACXD,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC,MAAM;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXD,MAAM,EAAE;IACV,CAAC;EACH;AACF,CAAC;AAED,SAASlB,KAAK,EAAEM,SAAS,EAAEK,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}