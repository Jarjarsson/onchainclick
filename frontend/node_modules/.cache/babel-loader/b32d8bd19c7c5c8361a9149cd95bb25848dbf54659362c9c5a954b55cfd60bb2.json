{"ast":null,"code":"import Web3 from 'web3';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW');\nconst ethereum = window.ethereum;\nconst clicker = new web3.eth.Contract(abi, contractAddress);\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n  const checkIfWalletIsConnect = async () => {\n    try {\n      if (!ethereum) return alert('Please install MetaMask.');\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n        getAllTransactions();\n      } else {\n        console.log('No accounts found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* \n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n           ✅{\" \"}\n             View the status of your transaction on Etherscan!\n            ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n       ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n  */\n};\n\nconst getClicks = async () => {\n  const data = await clicker.methods.clickedCount().call();\n  return Number(data);\n};\nconst reset = () => {\n  clicker.methods.reset().call().then(console.log);\n};\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!'\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob'\n    };\n  }\n};\nexport { click, getClicks, connectWallet };","map":{"version":3,"names":["Web3","abi","contractAddress","web3","ethereum","window","clicker","eth","Contract","click","methods","call","then","console","log","checkIfWalletIsConnect","alert","accounts","request","method","length","setCurrentAccount","getAllTransactions","error","getClicks","data","clickedCount","Number","reset","connectWallet","addressArray","obj","status","address","err"],"sources":["/Users/allanheremi/Desktop/dev/onchainbet/src/blockchain/web3/web3client.ts"],"sourcesContent":["import Web3, { Web3Eth } from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport abi from '../constants/abi';\nimport contractAddress from '../constants/address';\nimport { Window } from '../../type';\nimport { ethers } from 'ethers';\n\n// const web3 = new Web3('http://localhost:8545');\nconst web3 = new Web3(\n  'wss://eth-goerli.g.alchemy.com/v2/Ka3TSKFVasQ8sQNXkcnEaaO69XIO0nUW'\n);\nconst  ethereum  = (window as any).ethereum;\n\nconst clicker = new web3.eth.Contract(abi, contractAddress);\n\nconst click = () => {\n  clicker.methods.click().call().then(console.log);\n\n  const checkIfWalletIsConnect = async () => {\n    try {\n      if (!ethereum) return alert('Please install MetaMask.');\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n\n        getAllTransactions();\n      } else {\n        console.log('No accounts found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* \n//set up transaction parameters\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n\n//sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n\n          ✅{\" \"}\n\n            View the status of your transaction on Etherscan!\n\n\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n*/\n};\n\nconst getClicks = async () => {\n  const data = (await clicker.methods.clickedCount().call()) as bigint;\n  return Number(data);\n};\n\nconst reset = () => {\n  clicker.methods.reset().call().then(console.log);\n};\n\nconst connectWallet = async () => {\n  if ((window as any).ethereum) {\n    try {\n      const addressArray = await (window as any).ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      const obj = {\n        status: 'Successfully connected!',\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: '',\n        status: 'ERROR!',\n      };\n    }\n  } else {\n    return {\n      address: '',\n      status: 'You need to install metamask noob',\n    };\n  }\n};\n\nexport { click, getClicks, connectWallet };\n"],"mappings":"AAAA,OAAOA,IAAI,MAAmB,MAAM;AAEpC,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,eAAe,MAAM,sBAAsB;AAIlD;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CACnB,oEACF,CAAC;AACD,MAAOI,QAAQ,GAAKC,MAAM,CAASD,QAAQ;AAE3C,MAAME,OAAO,GAAG,IAAIH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAACP,GAAG,EAAEC,eAAe,CAAC;AAE3D,MAAMO,KAAK,GAAGA,CAAA,KAAM;EAClBH,OAAO,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;EAEhD,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI;MACF,IAAI,CAACX,QAAQ,EAAE,OAAOY,KAAK,CAAC,0BAA0B,CAAC;MAEvD,MAAMC,QAAQ,GAAG,MAAMb,QAAQ,CAACc,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAe,CAAC,CAAC;MAEnE,IAAIF,QAAQ,CAACG,MAAM,EAAE;QACnBC,iBAAiB,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE9BK,kBAAkB,CAAC,CAAC;MACtB,CAAC,MAAM;QACLT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;IACpB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,CAAC;;AAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMC,IAAI,GAAI,MAAMnB,OAAO,CAACI,OAAO,CAACgB,YAAY,CAAC,CAAC,CAACf,IAAI,CAAC,CAAY;EACpE,OAAOgB,MAAM,CAACF,IAAI,CAAC;AACrB,CAAC;AAED,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAClBtB,OAAO,CAACI,OAAO,CAACkB,KAAK,CAAC,CAAC,CAACjB,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;AAClD,CAAC;AAED,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAKxB,MAAM,CAASD,QAAQ,EAAE;IAC5B,IAAI;MACF,MAAM0B,YAAY,GAAG,MAAOzB,MAAM,CAASD,QAAQ,CAACc,OAAO,CAAC;QAC1DC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMY,GAAG,GAAG;QACVC,MAAM,EAAE,yBAAyB;QACjCC,OAAO,EAAEH,YAAY,CAAC,CAAC;MACzB,CAAC;MACD,OAAOC,GAAG;IACZ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAO;QACLD,OAAO,EAAE,EAAE;QACXD,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC,MAAM;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXD,MAAM,EAAE;IACV,CAAC;EACH;AACF,CAAC;AAED,SAASvB,KAAK,EAAEe,SAAS,EAAEK,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}